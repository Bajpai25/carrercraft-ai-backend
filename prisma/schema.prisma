generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())

  // Relations
  resumes      Resume[]
  coverLetters CoverLetter[]
  jobs         Job[]
  atsResults   ATSResult[]
  coldEmails   ColdEmail[]

  @@map("user")
}

model Job {
  id          String   @id @default(uuid())
  url         String  
  title       String
  company     String?
  description String?
  location    String?
  type        String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  // Relations
  atsResults  ATSResult[]
  skills      JobSkill[]

  @@map("job") // Table will be saved as "job" in DB
}

model Resume {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  fileUrl   String
  createdAt DateTime @default(now())
  resume_data Json?

  // Relations
  atsResults ATSResult[]
  skills     ResumeSkill[]

  @@map("resume")
}

model CoverLetter {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  fileUrl   String
  data      String?  // generated by deepseek
  createdAt DateTime @default(now())

  @@map("cover_letter")
}

model ColdEmail {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  data      String?  // generated by deepseek
  fileUrl   String?  // optional, if the email is saved as a file
  createdAt DateTime @default(now())

  @@map("cold_email")
}

model ATSResult {
  id            String   @id @default(uuid())
  resumeId      String
  resume        Resume   @relation(fields: [resumeId], references: [id])
  jobId         String
  job           Job      @relation(fields: [jobId], references: [id])
  score         Int
  createdAt     DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  // Many-to-many relation with skills
  missingSkills ATSResultSkill[]

  @@map("ats_result")
}

model Skill {
  id          String  @id @default(uuid())
  name        String  @unique

  // Relations (Many-to-Many)
  jobs        JobSkill[]
  resumes     ResumeSkill[]
  atsResults  ATSResultSkill[]

  @@map("skill")
}

/* âœ… Many-to-Many Relation Tables */
model JobSkill {
  jobId   String
  job     Job   @relation(fields: [jobId], references: [id])
  skillId String
  skill   Skill @relation(fields: [skillId], references: [id])

  @@id([jobId, skillId])
  @@map("job_skill")
}

model ResumeSkill {
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])
  skillId  String
  skill    Skill  @relation(fields: [skillId], references: [id])

  @@id([resumeId, skillId])
  @@map("resume_skill")
}

model ATSResultSkill {
  atsResultId String
  atsResult   ATSResult @relation(fields: [atsResultId], references: [id])
  skillId     String
  skill       Skill     @relation(fields: [skillId], references: [id])

  @@id([atsResultId, skillId])
  @@map("ats_result_skill")
}
